from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from django.http import JsonResponse
import openai

from django.contrib import auth
from django.contrib.auth.models import User
from .models import Chat

from django.utils import timezone
from decouple import config


DEBUG = config('DEBUG', default=False, cast=bool)
openai_api_key = config('OPEN_AI_KEY')
openai.api_key = openai_api_key

def ask_openai(message):
    """
    Generate a response using the OpenAI GPT-3.5-turbo model based on the provided user message.

    Parameters:
    - message (str): The user's input message for which a response is generated.

    Returns:
    - str: The generated response from the OpenAI GPT-3.5-turbo model.

    Usage:
    - Call this function with a user's message to receive a response generated by the GPT-3.5-turbo model.

    Example:
    >>> user_message = "What is the capital of France?"
    >>> response = ask_openai(user_message)
    >>> print(response)
    "The capital of France is Paris."
    
    Note:
    - This function uses the OpenAI GPT-3.5-turbo ChatCompletion API.
    - The conversation is structured with a system message ("You are a helpful assistant.") and the user's message.
    - The generated response is extracted and returned as a stripped string.
    """

    response = openai.ChatCompletion.create(
        model = "gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are an helpful assistant."},
            {"role": "user", "content": message},
        ]
    )
    
    answer = response.choices[0].message.content.strip()
    return answer

@login_required(login_url='/login')
def chatbot(request):
    """
    View function for handling user interactions with the chatbot.

    Parameters:
        request (HttpRequest): The HTTP request object containing user data and session information.

    Returns:
        HttpResponse: A JSON response containing the user's message and the chatbot's response.

    Decorators:
        @login_required: Ensures that only authenticated users can access the chatbot view.
    """

    chats = Chat.objects.filter(user=request.user)

    if request.method == 'POST':
        message = request.POST.get('message')
        response = ask_openai(message)

        chat = Chat(user=request.user, message=message, response=response, created_at=timezone.now())
        chat.save()
        return JsonResponse({'message': message, 'response': response})
    return render(request, 'chatbot.html', {'chats': chats})


def login(request):
    """
    Handles user login functionality.

    Parameters:
    - request (HttpRequest): The HTTP request object.

    Returns:
    - If the request method is 'POST':
        - If the provided 'username' and 'password' are valid, logs in the user and redirects to 'chatbot'.
        - If the provided credentials are invalid, renders the 'login.html' template with an error message.
    - If the request method is not 'POST', renders the 'login.html' template.

    """
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = auth.authenticate(request, username=username, password=password)
        if user is not None:
            auth.login(request, user)
            return redirect('chatbot')
        else:
            error_message = 'Invalid username or password'
            return render(request, 'login.html', {'error_message': error_message})
    else:
        return render(request, 'login.html')

def register(request):
    """
    Handles user registration.

    Parameters:
    - request (HttpRequest): The HTTP request object containing user data.

    Returns:
    - HttpResponseRedirect: Redirects to the 'chatbot' page upon successful registration.
    - HttpResponse: Renders the 'register.html' page with an error message if any issues occur.

    Note:
    - Uses Django's User model for user creation.
    - Utilizes Django's authentication system for user login.
    - Catches exceptions during user creation and displays an error message on failure.
    """
    if request.method == 'POST':
        username = request.POST['username']
        email = request.POST['email']
        password1 = request.POST['password1']
        password2 = request.POST['password2']

        if password1 == password2:
            try:
                user = User.objects.create_user(username, email, password1)
                user.save()
                auth.login(request, user)
                return redirect('chatbot')
            except:
                error_message = 'Error creating account'
                return render(request, 'register.html', {'error_message': error_message})
        else:
            error_message = 'Password dont match'
            return render(request, 'register.html', {'error_message': error_message})
    return render(request, 'register.html')

def logout(request):
    """
    Logs out the currently authenticated user and redirects to the login page.

    Parameters:
    - request (HttpRequest): The HTTP request object containing user information.

    Returns:
    - HttpResponseRedirect: Redirects to the 'login' page after successful logout.
    """
    auth.logout(request)
    return redirect('login')
